AWSTemplateFormatVersion: 2010-09-09
Description: "VPC Template"

Parameters:

  #---------------------------------------------------------------------#
  # Common
  #---------------------------------------------------------------------#
  Prefix:
    Type: String
    Default: "stg"
  
  ec2Prefix:
    Type: String
    Default: "step-server"

  
  #---------------------------------------------------------------------#
  # Network
  #---------------------------------------------------------------------#
  VpcCidr:
    Type: String
    Default: "10.0.0.0/16"

  PrivateSubnet1Cidr: 
    Type: String
    Default: "10.0.2.0/24"
  
  PrivateSubnet2Cidr: 
    Type: String
    Default: "10.0.3.0/24"
  
  #---------------------------------------------------------------------#
  # EC2
  #---------------------------------------------------------------------#
  EC2InstanceName:
    Type: String
    Default: "step-server"
  EC2InstanceAMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
  EC2InstanceType:
    Type: String
    Default: "t2.micro"
  EC2InstanceVolumeType:
    Type: String
    Default: "gp2"
  EC2InstanceVolumeSize:
    Type: String
    Default: "8"

Resources: 
  #---------------------------------------------------------------------#
  # Network
  #---------------------------------------------------------------------#

  StgVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-vpc"

  StgPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub ${AWS::Region}a
      VpcId: !Ref StgVPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-private-subnet1"
  
  StgPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub ${AWS::Region}c
      VpcId: !Ref StgVPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-private-subnet2"

  StgPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref StgVPC
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-rtb-private"

  # ルートテーブルをサブネットに関連付け
  PrivateSubnet1TableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      # どのサブネットを指定するか
      SubnetId: !Ref StgPrivateSubnet1
      RouteTableId: !Ref StgPrivateRouteTable
  
  PrivateSubnet2TableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref StgPrivateSubnet2
      RouteTableId: !Ref StgPrivateRouteTable

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${ec2Prefix}-sg"
      GroupDescription: !Sub "${ec2Prefix}-sg"
      VpcId: !Ref StgVPC
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
          FromPort: -1
          ToPort: -1
      Tags:
        - Key: Name
          Value: !Sub "${ec2Prefix}-sg"

  #---------------------------------------------------------------------#
  # VPC Endpoint
  #---------------------------------------------------------------------#
  SsmVpcEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${Prefix}-ssm-vpc-endpoint-sg"
      GroupDescription: !Sub "${Prefix}-ssm-vpc-endpoint-sg"
      VpcId: !Ref StgVPC
      SecurityGroupIngress:
        - CidrIp: !Ref VpcCidr
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: -1
          IpProtocol: -1
          ToPort: -1
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-ssm-vpc-endpoint-sg"

  SsmVpcEndpoint: 
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      # PolicyDocument: Json
      PrivateDnsEnabled: true
      VpcEndpointType: Interface
      SecurityGroupIds: 
        - !Ref SsmVpcEndpointSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      SubnetIds: 
        - !Ref StgPrivateSubnet1
      VpcId: !Ref StgVPC

  SsmMessagesVpcEndpoint: 
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      # PolicyDocument: Json
      PrivateDnsEnabled: true
      VpcEndpointType: Interface
      SecurityGroupIds: 
        - !Ref SsmVpcEndpointSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
      SubnetIds: 
        - !Ref StgPrivateSubnet1
      VpcId: !Ref StgVPC

  Ec2MessagesVpcEndpoint: 
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      # PolicyDocument: Json
      PrivateDnsEnabled: true
      VpcEndpointType: Interface
      SecurityGroupIds: 
        - !Ref SsmVpcEndpointSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
      SubnetIds: 
        - !Ref StgPrivateSubnet1
      VpcId: !Ref StgVPC

  #---------------------------------------------------------------------#
  # Ec2InstanceProfile
  #---------------------------------------------------------------------#
  Ec2Role: 
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub "${Prefix}-EC2SSMRoleForRDSAccess"
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - Effect: Allow
            Principal: 
              Service: 
                - ec2.amazonaws.com
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: !Sub "${Prefix}-ec2-instance-profile"
      Roles: 
        - !Ref Ec2Role

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      Tags: 
      - Key: Name
        Value: !Sub "${ec2Prefix}"
      DisableApiTermination: false
      EbsOptimized: false
      ImageId: !Ref EC2InstanceAMI
      InstanceType: !Ref EC2InstanceType
      IamInstanceProfile: !Ref Ec2InstanceProfile
      # Monitoring: true|false
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      SubnetId: !Ref StgPrivateSubnet1
      BlockDeviceMappings: 
         - 
            DeviceName: /dev/xvda
            Ebs: 
              DeleteOnTermination: true
              VolumeType: !Ref EC2InstanceVolumeType
              VolumeSize: !Ref EC2InstanceVolumeSize

# ------------------------------------------------------------#
# Output Parameters
# ------------------------------------------------------------# 

Outputs:
  VPC:
    Value: !Ref StgVPC
    Export:
      Name: StgVPC-From-Ec2-Vpcendpoint
      # Name: !Sub ${AWS::StackName}VPCFromEc2_Vpcendpoint

  VpcId:
    Value: !Ref VpcCidr
    Export:
      Name: VpcCidr
  
  PrivateSubnet1Cidr:
    Value: !Ref PrivateSubnet1Cidr
    Export:
      Name: PrivateSubnet1Cidr

  PrivateSubnet1Id:
    Value: !Ref StgPrivateSubnet1
    Export:
      Name: PrivateSubnet1Id

  PrivateSubnet2Id:
    Value: !Ref StgPrivateSubnet2
    Export:
      Name: PrivateSubnet2Id

  EC2SecurityGroup: 
    Value: !Ref EC2SecurityGroup
    Export: 
      Name: Stg-From-EC2SecurityGroup